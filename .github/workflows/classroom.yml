name: Autograde

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Ensure outputs dir exists
        run: mkdir -p tests/outputs

      - name: Checkout hidden tests
        if: env.HIDDEN_REPO_URL
        env:
          GH_PAT: ${{ secrets.GH_PAT_HIDDEN }}
        run: |
          git clone https://$GH_PAT@${{ env.HIDDEN_REPO_URL }} hidden_tests
          cp -r hidden_tests ./hidden_tests

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - id: pytest
        name: Run tests
        run: |
          pytest -q tests hidden_tests | tee result.txt
          echo "result=$?" >> "$GITHUB_OUTPUT"

      - name: Get Badgr access token
        id: get-badgr-token
        run: |
          TOKEN=$(curl -s -X POST https://api.badgr.io/o/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=password" \
            -d "username=${{ secrets.BADGR_USERNAME }}" \
            -d "password=${{ secrets.BADGR_PASSWORD }}" \
            -d "scope=rw:issuer" \
            | jq -r .access_token)
          echo "badgr_token=$TOKEN" >> "$GITHUB_OUTPUT"

      - name: Read student email
        id: get-recipient
        run: |
          if [ ! -s student_email.txt ]; then
            echo "ERROR: student_email.txt is empty or missing" >&2
            exit 1
          fi
          EMAIL=$(head -n1 student_email.txt | tr -d '\r\n')
          echo "recipient_email=$EMAIL" >> "$GITHUB_OUTPUT"

      - name: Issue Badgr badge
        id: issue_badge
        if: steps.pytest.outputs.result == '0'
        env:
          BADGR_TOKEN:     ${{ steps.get-badgr-token.outputs.badgr_token }}
          BADGE_ID:        ${{ secrets.BADGR_BADGE_ID }}
          RECIPIENT_EMAIL: ${{ steps.get-recipient.outputs.recipient_email }}
        run: |
          URL=$(curl -s -X POST https://api.badgr.io/v2/badgeclasses/$BADGE_ID/issue \
            -H "Authorization: Bearer $BADGR_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
                  "recipient": {
                    "identity": "'"$RECIPIENT_EMAIL"'",
                    "type": "email"
                  }
                }' \
            | jq -r '.result[0].assertionRef.assertionUrl')
          echo "badge_url=$URL" >> "$GITHUB_OUTPUT"

      - name: Post result summary
        run: |
          echo "### ✅ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.pytest.outputs.result }}" = "0" ]; then
            echo "- All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Some tests failed. Please fix and push again." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.issue_badge.outputs.badge_url != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            :tada: **All tests passed!**  
            🎓 Claim your badge here:  
            ${{ steps.issue_badge.outputs.badge_url }}
